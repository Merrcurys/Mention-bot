import asyncio

from pyrogram import Client, filters, enums
from pyrogram.types import Message
from pyrogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup

from loader import app, logger, ADMIN_CHAT_ID, database
from models.models import ChatConfig
from models.utils import create_table_if_not_exists
from lang import get_text as _

# —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
database.create_tables([ChatConfig])

# —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è "–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö" –∫–æ–º–∞–Ω–¥
frozen_commands = {}


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
async def get_chat_admins(message):
    admins = [
        admin
        async for admin in app.get_chat_members(
            message.chat.id, filter=enums.ChatMembersFilter.ADMINISTRATORS
        )
    ]
    admins_id = [admin.user.id for admin in admins]
    return admins_id


# --------—Ñ—É–Ω–∫—Ü–∏—è —Å–ø—Ä–∞–≤–∫–∏--------
@app.on_message(filters.command(["help", "command"]) & filters.group)
async def help_command(client: Client, message: Message):
    user_language = message.from_user.language_code

    create_table_if_not_exists(chat_id=message.chat.id)
    chat_config = ChatConfig.get(ChatConfig.chat_id == message.chat.id)
    chat_config.language

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang:ru"
                ),
                InlineKeyboardButton(
                    text="üá¨üáß English", callback_data="lang:en"
                ),
            ]
        ]
    )

    await message.reply_text(
        _("help_text", chat_config.language),
        reply_markup=keyboard,
    )


# --------–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏--------
@app.on_callback_query(filters.regex(r"^lang:"))
async def handle_lang_change(client: Client, query):
    lang = query.data.split(":")[1]

    create_table_if_not_exists(chat_id=query.message.chat.id)
    chat_config = ChatConfig.get(ChatConfig.chat_id == query.message.chat.id)
    if chat_config.language != lang:
        chat_config.language = lang
        chat_config.save()
        await query.message.edit_text(
            _("help_text", lang),
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang:ru"
                        ),
                        InlineKeyboardButton(
                            text="üá¨üáß English", callback_data="lang:en"
                        ),
                    ]
                ]
            ),
        )


# --------—Ñ—É–Ω–∫—Ü–∏—è —Å–ø—Ä–∞–≤–∫–∏--------
@app.on_message(filters.command(["start"]) & filters.private)
async def help_command(client: Client, message: Message):
    user_language = message.from_user.language_code
    await message.reply_text(_('help_text', user_language))


# --------—Ñ—É–Ω–∫—Ü–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è--------
@app.on_message(filters.command(["all", "here", "everyone"]) & filters.group)
async def call_all_users(client: Client, message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–∞—Ç–∞
        create_table_if_not_exists(chat_id=message.chat.id)
        admins = await get_chat_admins(message)
        chat_config = ChatConfig.get(ChatConfig.chat_id == message.chat.id)
        lang = chat_config.language

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if not chat_config.need_access or message.from_user.id in admins:
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ –Ω–µ –±–æ–ª—å—à–µ 75
            members = [member async for member in app.get_chat_members(message.chat.id)]
            if len(members) <= 75:
                if message.chat.id in frozen_commands:
                    await message.reply(_("spam_control", lang))
                else:
                    # –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –µ—ë –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
                    await send_user_links(message)
                    frozen_commands[message.chat.id] = True
                    await asyncio.sleep(60)
                    del frozen_commands[message.chat.id]
            else:
                await message.reply(_("many_users", lang))
        else:
            await message.reply(_("only_admin", lang))
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await app.send_message(ADMIN_CHAT_ID, f"–ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê {e}")


# —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def send_user_links(message: Message):
    link_users = []

    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö
    async for user in app.get_chat_members(message.chat.id):
        if user.user.is_bot:
            continue

        chat_config = ChatConfig.get(ChatConfig.chat_id == message.chat.id)
        lang = chat_config.language

        if chat_config.is_nickname_visible:
            link_users.append(
                # —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º–æ–º –∏–ª–∏ —Å –∏–º–µ–Ω–µ–º
                f"[@{user.user.username or user.user.first_name}, ](tg://user?id={
                    user.user.id})"
            )
        else:
            # —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ U+200b (–Ω–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª)
            link_users.append(f"[‚Äã](tg://user?id={user.user.id})")

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –Ω–∞ 5 —Å—Å—ã–ª–æ–∫ –≤ 1 —Å–æ–æ–±—â–µ–Ω–∏–∏)
        if len(link_users) == 5:
            await message.reply(
                f"{_('all_info', lang)}{''.join(link_users)}",
                parse_mode=enums.ParseMode.MARKDOWN,
            )
            link_users = []

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if link_users:
        await message.reply(
            f"{_('all_info', lang)}{''.join(link_users)}",
            parse_mode=enums.ParseMode.MARKDOWN,
        )


# --------—Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞--------
@app.on_message(filters.command(["access_toggle"]) & filters.group)
async def access_toggle(client: Client, message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–∞—Ç–∞
    create_table_if_not_exists(chat_id=message.chat.id)
    admins = await get_chat_admins(message)
    chat_config = ChatConfig.get(ChatConfig.chat_id == message.chat.id)
    lang = chat_config.language

    if message.from_user.id in admins:
        chat_config.need_access = not chat_config.need_access
        chat_config.save()

        text = (
            _("mention_all", lang)
            if not chat_config.need_access
            else _("mention_admin", lang)
        )
        await message.reply(text)

    else:
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        await message.reply(_("only_admin", lang))


# --------—Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏–º–µ–Ω--------
@app.on_message(filters.command(["names_visibility"]) & filters.group)
async def names_visibility_toggle(client: Client, message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–∞—Ç–∞
    create_table_if_not_exists(chat_id=message.chat.id)
    admins = await get_chat_admins(message)
    chat_config = ChatConfig.get(ChatConfig.chat_id == message.chat.id)
    lang = chat_config.language

    if message.from_user.id in admins:
        chat_config.is_nickname_visible = not chat_config.is_nickname_visible
        chat_config.save()

        text = (
            _("show_username", lang)
            if chat_config.is_nickname_visible
            else _("hide_username", lang)
        )
        await message.reply(text)

    else:
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        await message.reply(_("only_admin", lang))


# –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
app.run()
